name: Build Android Kernel (SukiSU + SUSFS Non-GKI)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: LineageOS/android_kernel_lge_sdm845
          ref: lineage-22.2
          path: kernel
          fetch-depth: 1

      - name: ⚙️ Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bc bison build-essential ccache curl flex g++-multilib \
            gcc-multilib git gnupg gperf imagemagick lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libssl-dev \
            libxml2 libxml2-utils lzop pngcrush rsync schedtool \
            squashfs-tools xsltproc zip zlib1g-dev unzip python3 \
            python-is-python3 openjdk-11-jdk

      - name: 🧰 Download toolchains
        run: |
          mkdir -p $GITHUB_WORKSPACE/toolchain
          cd $GITHUB_WORKSPACE/toolchain
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b \
            -b lineage-20.0 clang --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 \
            -b lineage-19.1 gcc64 --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 \
            -b lineage-19.1 gcc32 --depth=1

      - name: 🧩 Integrate SukiSU and SUSFS (kernel_4.9)
        run: |
          cd kernel

          echo "=== 🔧 Integrating SukiSU ==="
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s nongki

          echo "=== 🔧 Integrating SUSFS ==="
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main

          echo "=== 📥 Cloning SUSFS source for 4.9 kernel ==="
          git clone -b kernel-4.9 https://gitlab.com/simonpunk/susfs4ksu.git susfs4ksu --depth=1

          if [ -d "susfs4ksu/kernel_patches" ]; then
            echo "→ Copying SUSFS headers and source files"
            cp -v susfs4ksu/kernel_patches/include/linux/susfs*.h include/linux/
            cp -rv susfs4ksu/kernel_patches/fs/susfs fs/
            echo "✅ SUSFS source integration complete"
          else
            echo "❌ SUSFS source not found or invalid structure"
            exit 1
          fi

      - name: 🧪 Configure kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64

          make O=out judyln_lao_com-perf_defconfig

          # Enable essential options
          scripts/config --file out/.config --enable CONFIG_KPM
          scripts/config --file out/.config --enable CONFIG_KALLSYMS
          scripts/config --file out/.config --enable CONFIG_KALLSYMS_ALL
          scripts/config --file out/.config --enable MODULES
          scripts/config --file out/.config --enable MODULE_UNLOAD
          scripts/config --file out/.config --enable OVERLAY_FS
          scripts/config --file out/.config --enable CONFIG_SUSFS || true

          # Disable problematic options
          scripts/config --file out/.config --disable EFI
          scripts/config --file out/.config --disable EFI_STUB
          scripts/config --file out/.config --disable RANDOMIZE_BASE

          make O=out olddefconfig

          echo "=== Final config summary:"
          grep -E "CONFIG_KPM|CONFIG_KALLSYMS|CONFIG_SUSFS" out/.config || true

      - name: 🧱 Build kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANGDIR=$GITHUB_WORKSPACE/toolchain/clang
          export GCCDIR64=$GITHUB_WORKSPACE/toolchain/gcc64
          export GCCDIR32=$GITHUB_WORKSPACE/toolchain/gcc32
          export PATH=$CLANGDIR/bin:$GCCDIR64/bin:$GCCDIR32/bin:$PATH
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-

          echo "=== Starting kernel build ==="
          make -j$(nproc) O=out ARCH=arm64 LLVM=1 2>&1 | tee build.log

          echo "=== Build complete ==="
          ls -lh out/arch/arm64/boot/ || true

      - name: 📦 Prepare release artifacts
        run: |
          mkdir -p release
          cd kernel/out/arch/arm64/boot/
          cp Image.gz-dtb $GITHUB_WORKSPACE/release/ 2>/dev/null || true
          cp Image.gz     $GITHUB_WORKSPACE/release/ 2>/dev/null || true
          cp Image        $GITHUB_WORKSPACE/release/ 2>/dev/null || true
          cd $GITHUB_WORKSPACE/release
          ls -lh

      - name: 📤 Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sukisu-susfs-kernel-${{ github.run_number }}
          path: release/*

      - name: 📤 Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ github.run_number }}
          path: kernel/build.log

