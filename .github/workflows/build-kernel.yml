name: Build Android Kernel (Non-GKI)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: LineageOS/android_kernel_lge_sdm845
          ref: lineage-22.2
          path: kernel
          fetch-depth: 1

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bc bison build-essential ccache curl flex g++-multilib \
            gcc-multilib git gnupg gperf imagemagick lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libssl-dev \
            libxml2 libxml2-utils lzop pngcrush rsync schedtool \
            squashfs-tools xsltproc zip zlib1g-dev unzip python3 \
            python-is-python3 openjdk-11-jdk

      - name: Download toolchains
        run: |
          mkdir -p $GITHUB_WORKSPACE/toolchain
          cd $GITHUB_WORKSPACE/toolchain
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b \
            -b lineage-20.0 clang --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 \
            -b lineage-19.1 gcc64 --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 \
            -b lineage-19.1 gcc32 --depth=1

      - name: Integrate KernelSU
        run: |
          cd kernel
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          test -d KernelSU && echo "✓ KernelSU integrated" || (echo "✗ KernelSU failed" && exit 1)

      - name: Apply manual KSU hook patch if needed
        run: |
          cd kernel
          if grep -q "ksu_handle_execveat" fs/exec.c; then
            echo "✓ Hooks exist"
          else
            echo "Applying manual patch..."
            cat <<'EOF' > /tmp/ksu_exec.patch
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1890,6 +1897,18 @@ static int do_execveat_common(int fd, struct filename *filename,
                               struct user_arg_ptr argv,
                               struct user_arg_ptr envp,
                               int flags)
 {
+#ifdef CONFIG_KSU
+   if (unlikely(ksu_execveat_hook))
+       ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+   else
+       ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+#endif
     return __do_execve_file(fd, filename, argv, envp, flags, NULL);
 }
EOF
            patch -p1 < /tmp/ksu_exec.patch || echo "Patch failed, continuing"
          fi

      - name: Configure kernel
        run: |
          cd kernel
          export ARCH=arm64
          make O=out judyln_lao_com-perf_defconfig
          scripts/config --file out/.config --enable CONFIG_KSU
          scripts/config --file out/.config --enable CONFIG_KSU_MANUAL_HOOK
          scripts/config --file out/.config --disable CONFIG_KSU_DEBUG
          scripts/config --file out/.config --enable KALLSYMS
          scripts/config --file out/.config --enable KALLSYMS_ALL
          scripts/config --file out/.config --enable MODULES
          scripts/config --file out/.config --enable MODULE_UNLOAD
          scripts/config --file out/.config --enable OVERLAY_FS
          scripts/config --file out/.config --disable EFI
          scripts/config --file out/.config --disable EFI_STUB
          scripts/config --file out/.config --disable RANDOMIZE_BASE
          make O=out ARCH=arm64 olddefconfig

      - name: Build kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANGDIR=$GITHUB_WORKSPACE/toolchain/clang
          export GCCDIR64=$GITHUB_WORKSPACE/toolchain/gcc64
          export GCCDIR32=$GITHUB_WORKSPACE/toolchain/gcc32
          export PATH=$CLANGDIR/bin:$GCCDIR64/bin:$GCCDIR32/bin:$PATH
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          make -j$(nproc) O=out ARCH=arm64 LLVM=1 2>&1 | tee build.log

      - name: Check results
        run: |
          cd kernel/out/arch/arm64/boot
          ls -lh
          test -f Image || (echo "No kernel image found!" && exit 1)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_number }}
          path: kernel/out/arch/arm64/boot/
