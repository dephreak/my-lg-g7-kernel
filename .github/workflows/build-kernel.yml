name: Build Android Kernel (Non-GKI)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: LineageOS/android_kernel_lge_sdm845
          ref: lineage-22.2
          path: kernel
          fetch-depth: 1

      - name: Setup build environment
        run: |
          echo "=== Setting up build environment ==="
          sudo apt-get update
          sudo apt-get install -y \
            bc bison build-essential ccache curl flex g++-multilib \
            gcc-multilib git gnupg gperf imagemagick lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libssl-dev \
            libxml2 libxml2-utils lzop pngcrush rsync schedtool \
            squashfs-tools xsltproc zip zlib1g-dev unzip python3 \
            python-is-python3 openjdk-11-jdk

      - name: Download toolchains
        run: |
          echo "=== Downloading toolchains ==="
          mkdir -p $GITHUB_WORKSPACE/toolchain
          cd $GITHUB_WORKSPACE/toolchain

          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b \
            -b lineage-20.0 clang --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 \
            -b lineage-19.1 gcc64 --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 \
            -b lineage-19.1 gcc32 --depth=1

      - name: Integrate KernelSU for Non-GKI (Manual Hook Mode)
        run: |
          echo "=== Integrating KernelSU ==="
          cd kernel

          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

          if [ -d "KernelSU" ]; then
            echo "✓ KernelSU integrated successfully"
          else
            echo "✗ KernelSU integration failed"
            exit 1
          fi

          echo "=== Checking for KernelSU hooks ==="
          grep -r "ksu_handle_execveat" fs/exec.c || echo "No automatic hooks found - will need manual config"

      - name: Apply Non-GKI Manual Hooks (if needed)
        run: |
          echo "=== Checking/patching fs/exec.c ==="
          cd kernel

          if grep -q "ksu_handle_execveat" fs/exec.c; then
            echo "✓ KernelSU hooks already present, continuing..."
          else
            echo "Applying manual KernelSU hooks for 4.9 kernel..."

            cat > /tmp/ksu_exec.patch <<'PATCH'
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1890,6 +1897,18 @@ static int do_execveat_common(int fd, struct filename *filename,
                               struct user_arg_ptr argv,
                               struct user_arg_ptr envp,
                               int flags)
 {
+#ifdef CONFIG_KSU
+   if (unlikely(ksu_execveat_hook))
+       ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+   else
+       ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+#endif
     return __do_execve_file(fd, filename, argv, envp, flags, NULL);
 }
PATCH

            patch -p1 < /tmp/ksu_exec.patch || echo "⚠ Patch failed, continuing anyway"
          fi

          echo "=== Verifying hooks ==="
          grep -A 10 "do_execveat_common" fs/exec.c | head -20

      - name: Integrate SukiSU (Non-GKI Compatible)
        run: |
          echo "=== Integrating SukiSU ==="
          cd kernel

          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s nongki || echo "SukiSU nongki setup done"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main || echo "SUSFS setup attempted"

          git clone https://gitlab.com/simonpunk/susfs4ksu.git susfs4ksu --depth=1 || true

          if [ -d "susfs4ksu/kernel_patches" ]; then
            cp -r susfs4ksu/kernel_patches/include/linux/susfs.h include/linux/ 2>/dev/null || true
            cp -r susfs4ksu/kernel_patches/fs/susfs fs/ 2>/dev/null || true
            echo "✓ SUSFS patches integrated"
          fi

      - name: Configure kernel for Non-GKI KernelSU
        run: |
          echo "=== Configuring kernel ==="
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64

          make O=out judyln_lao_com-perf_defconfig

          scripts/config --file out/.config --enable CONFIG_KSU
          scripts/config --file out/.config --enable CONFIG_KSU_MANUAL_HOOK
          scripts/config --file out/.config --disable CONFIG_KSU_DEBUG

          scripts/config --file out/.config --enable KALLSYMS
          scripts/config --file out/.config --enable KALLSYMS_ALL
          scripts/config --file out/.config --enable MODULES
          scripts/config --file out/.config --enable MODULE_UNLOAD
          scripts/config --file out/.config --enable OVERLAY_FS

          scripts/config --file out/.config --disable EFI
          scripts/config --file out/.config --disable EFI_STUB
          scripts/config --file out/.config --disable RANDOMIZE_BASE

          scripts/config --file out/.config --enable SECURITY
          scripts/config --file out/.config --disable SECURITY_SELINUX_DEVELOP

          scripts/config --file out/.config --enable CONFIG_KSU_SUSFS || true

          make O=out ARCH=arm64 olddefconfig

          echo "=== KernelSU Config ==="
          grep -E "CONFIG_KSU|CONFIG_OVERLAY" out/.config || true
